// This is the public API offered by your entity.
syntax = "proto3";


import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

package com.example;

message UserProfile {
    string user_profile_id = 1 [(akkaserverless.field).entity_key = true];
    string name = 2;
    string status = 3;
    repeated Device devices = 4;
}

message Device {
    string id = 1;
    string name = 2;
}

message MyRequest {
    string user_profile_id = 1 [(akkaserverless.field).entity_key = true];
}

message MyResponse {
    string name = 1;
    string status = 2;
    bool online = 3;
    repeated Device devices = 4;
}

service MyApi {
    rpc GetUser(MyRequest) returns (MyResponse) {
        option (google.api.http) = {
            get: "/users/{user_profile_id}",
        };  
    }
    rpc CreateUser(UserProfile) returns (MyResponse) {
        option (google.api.http) = {
            post: "/users",
            body: "*"
        };  
    }
    rpc UpdateUser(UserProfile) returns (MyResponse) {
        option (google.api.http) = {
            put: "/users/{user_profile_id}",
            body: "*"
        };  
    } 

    rpc UpdateUserDevices(UserProfile) returns (google.protobuf.Empty) {
        option (akkaserverless.method).eventing = {
            in: {
              topic: "device_added"
            }
        };
    };  

 
}

message UsersResponse {
    repeated UserProfile results = 1; 
}

service MyQueryApi {
    rpc UpdateView(UserProfile) returns (UserProfile) {
        option (akkaserverless.method).eventing = {
          in: {
            value_entity: "user_profiles"
          }
        };
        option (akkaserverless.method).view.update = {
          table: "user_profiles"
        };
    }

    rpc GetUsers(google.protobuf.Empty) returns (UsersResponse) {
        option (akkaserverless.method).view.query = {
          query: "SELECT * AS results FROM user_profiles"
        };
        option (google.api.http) = {
            get: "/users"
        };  
    }  
}

message UserDevices {
    string user_profile_id = 1;
    repeated Device devices = 4;
    
}

service MyEventApi {
    rpc ValidateDevices(UserDevices) returns (UserProfile) {
        option (akkaserverless.method).eventing = {
            out: {
              topic: "device_added"
            }
        };
        option (google.api.http) = {
            post: "/users/{user_profile_id}/devices",
            body: "*"
        };
    };          
    

        
}